#!/bin/bash

args=$@
scriptname=`basename ${0}`
scriptpath=`dirname ${0}`

function usage {
  # Outputs help menu; more to be added to in future, perhaps with more options.
  cat <<EOF
Usage: ${scriptname} [options]

-h/? | Output this help page.

EOF
}

# Menus

function menu-main {
  # Outputs main menu
  while [ true ]
  do
    clear
    cat <<EOF
=============================
  #       Main Menu       #
-----------------------------
  Select an option:
    1. First-time setup
    2. Wine / BSIPA
    3. Mods
    4. Config
    5. Exit
-----------------------------
EOF

    echo -ne "Your input: "
    read selectedoption

    case $selectedoption in
      1)
      menu-first-time-setup;;
      2)
      menu-wine;;
      3)
      menu-mods;;
      4)
      menu-config;;
      5)
      echo "============================="
      break;;
      *)
      echo "-----------------------------"
      echo "Invalid option!"
      echo "============================="
      sleep 1;;
    esac
  done

  exit 0
}

function menu-first-time-setup {
  # Output first-time setup wizard
  while [ true ]
  do
    while [ true ]
    do
      clear
      cat <<EOF
=============================
  #   First-time Setup    #
-----------------------------
  Welcome to QBeat-tui!
  The first-time setup will
  guide you through setting
  up your config, and will
  automatically setup wine
  and patch your game with
  BSIPA.
-----------------------------
EOF

      echo -ne "Continue (y/n)? "
      read selectedoption

      case $selectedoption in
        y|Y)
        break 1;;
        n|N)
        break 2;;
        *)
        echo "-----------------------------"
        echo "Invalid option"
        echo "============================="
        sleep 1;;
      esac
    done

    error=0

    while [ true ]
    do
      clear
      cat <<EOF
=============================
  Firstly, you will need to
  set up your config. Hit
  enter without typing
  anything to select the
  default option.
-----------------------------
EOF

      action-installer-set-config "~/.wine" "winePrefix"
      if [ $error == 1 ]
      then
        break
      fi
      echo "-----------------------------"
      action-installer-set-config "~/.steam/steam/steamapps/common/Beat Saber" "bsInstall"
      if [ $error == 1 ]
      then
        break
      fi
      echo "-----------------------------"
      action-installer-set-version
      if [ $error == 1 ]
      then
        break
      fi

      echo "-----------------------------"
      read -n 1 -s -r -p "Press any key to contine..."
      break
    done

    while [ true ]
    do
      if [ $error == 1 ]
      then
        break
      fi

      clear
      cat <<EOF
=============================
  Now, the installer will
  attempt to validate your
  wine prefix, set it up if
  necessary, and patch Beat
  Saber with BSIPA.
-----------------------------
EOF

      ${scriptpath}/QBeat --setup-wine
      if [ $? == 1 ]
      then
        echo "-----------------------------"
        echo "ERROR: Setting up wine failed."
        error=1
        break
      fi

      ${scriptpath}/QBeat --validate-wine
      if [ $? == 1 ]
      then
        echo "-----------------------------"
        echo "ERROR: Wine prefix did not pass validation."
        error=1
        break
      fi

      ${scriptpath}/QBeat --install "BSIPA"
      if [ $? == 1 ]
      then
        echo "-----------------------------"
        echo "ERROR: Installing BSIPA failed."
        error=1
        break
      fi

      ${scriptpath}/QBeat --patch
      if [ $? == 1 ]
      then
        echo "-----------------------------"
        echo "ERROR: Patching the game failed."
        error=1
        break
      fi

      echo "-----------------------------"
      echo "All operations seemed successful!"
      break
    done

    echo "-----------------------------"
    read -n 1 -s -r -p "Press any key to contine..."

    if [ $error == 0 ]
    then
      while [ true ]
      do
        clear
        cat <<EOF
=============================
  Congratulations!
  Everything seemed to
  work correctly. You may
  now proceed to install
  any mods you wish.
-----------------------------
EOF

      read -n 1 -s -r -p "Press any key to contine..."
      break 2
      done
    else
      while [ true ]
      do
        clear
        cat <<EOF
=============================
  The installation failed
  at some step. Would you
  like to retry (y/n)?
-----------------------------
EOF

        echo -ne "Your input: "
        read selectedoption

        case $selectedoption in
          y|Y)
          break 1;;
          n|N)
          break 2;;
          *)
          echo "-----------------------------"
          echo "Invalid option"
          echo "============================="
          sleep 1;;
        esac
      done
    fi
  done
}

function menu-wine {
  # Outputs Wine & BSIPA menu
  while [ true ]
  do
    clear
    cat <<EOF
=============================
  #     Wine / BSIPA      #
-----------------------------
  Select an option:
    1. Validate wine
    2. Setup wine
    3. Install BSIPA
    4. Back
-----------------------------
EOF

    echo -ne "Your input: "
    read selectedoption

    case $selectedoption in
      1)
      action-validate-wine;;
      2)
      action-setup-wine;;
      3)
      action-patch-game;;
      4)
      break;;
      *)
      echo "-----------------------------"
      echo "Invalid option"
      echo "============================="
      sleep 1;;
    esac
  done
}

function menu-mods {
  # Output mod menu
  while [ true ]
  do
    clear
    cat <<EOF
=============================
  #         Mods          #
-----------------------------
  Select an option:
    1. List all available
       mods
    2. Validate mod(s)
    3. Install mod(s)
    4. Uninstall mod(s)
    5. Back
-----------------------------
EOF

    echo -ne "Your input: "
    read selectedoption

    case $selectedoption in
      1)
      action-list-mods;;
      2)
      menu-validate-mods;;
      3)
      action-install-mods;;
      4)
      action-uninstall-mods;;
      5)
      break;;
      *)
      echo "-----------------------------"
      echo "Invalid option"
      echo "============================="
      sleep 1;;
    esac
  done
}

function menu-validate-mods {
  # Output mod validation menu
  while [ true ]
  do
    clear
    cat <<EOF
=============================
  #    Validate Mods      #
-----------------------------
  Select an option:
    1. Validate all mods
    2. Validate a specific
       mod
    3. Back
-----------------------------
EOF

    echo -ne "Your input: "
    read selectedoption

    case $selectedoption in
      1)
      action-validate-mods;;
      2)
      action-validate-mod;;
      3)
      break;;
      *)
      echo "-----------------------------"
      echo "Invalid option"
      echo "============================="
      sleep 1;;
    esac
  done
}

function menu-config {
  # Output config menu
  while [ true ]
  do
    clear
    cat <<EOF
=============================
  #         Config         #
-----------------------------
  Select an option:
    1. Output all config
       variables
    2. Output a specific
       config variable
    3. Set a config variable
    4. Back
-----------------------------
EOF

    echo -ne "Your input: "
    read selectedoption

    case $selectedoption in
      1)
      action-config-get;;
      2)
      menu-config-get-specific;;
      3)
      menu-config-set;;
      4)
      break;;
      *)
      echo "-----------------------------"
      echo "Invalid option"
      echo "============================="
      sleep 1;;
    esac
  done
}


function menu-config-get-specific {
  # Output specific config get menu
  while [ true ]
  do
    clear
    cat <<EOF
=============================
  #    Which variable?     #
-----------------------------
  Select an option:
    1. bsInstall
    2. gameType
    3. gameVersion
    4. winePrefix
    5. Back
-----------------------------
EOF

    echo -ne "Your input: "
    read selectedoption

    case $selectedoption in
      1)
      action-config-get bsInstall;;
      2)
      action-config-get gameType;;
      3)
      action-config-get gameVersion;;
      4)
      action-config-get winePrefix;;
      5)
      break;;
      *)
      echo "-----------------------------"
      echo "Invalid option"
      echo "============================="
      sleep 1;;
    esac
  done
}

function menu-config-set {
  # Output specific config set menu
  while [ true ]
  do
    clear
    cat <<EOF
=============================
  #    Which variable?     #
-----------------------------
  Select an option:
    1. bsInstall
    2. gameType
    3. gameVersion
    4. winePrefix
    5. Back
-----------------------------
EOF

    echo -ne "Your input: "
    read selectedoption

    case $selectedoption in
      1)
      action-config-set bsInstall;;
      2)
      action-config-set gameType;;
      3)
      action-version-set;;
      4)
      action-config-set winePrefix;;
      5)
      break;;
      *)
      echo "-----------------------------"
      echo "Invalid option"
      echo "============================="
      sleep 1;;
    esac
  done
}

# Actions

function action-installer-set-config {
  # Sets config as part of first-time setup. First argument is the default value,
  # and the second argument is the variable name to be changed.
  echo "Default: $1"
  echo -ne "$2: "
  read configvalue # No bash autocompletion - breaks in-line default replacement
  if [ -z "$configvalue" ]
  then
    configvalue=$1
    echo -ne "\033[1A"
    echo "$2: $configvalue"
  fi
  ${scriptpath}/QBeat --config set $2 "$configvalue"
}

function action-installer-set-version {
  # Sets version as part of first-time setup, similarly to action-version-set.
  versionsarray=( $( curl -sL https://versions.beatmods.com/versions.json | sed -e 's/\[//' -e 's/\]//' -e 's/,/\n/g' ) )

  echo "Default: ${versionsarray[0]//\"/}"
  echo "Select a version:"
  for i in ${!versionsarray[@]}
  do
    echo "  $((i+1))) ${versionsarray[${i}]//\"/}"
  done
  echo -ne "Your input: "
  read selectedoption
  if ! [[ "$selectedoption" -eq "$selectedoption" ]] 2> /dev/null
  then
    echo "-----------------------------"
    echo "ERROR: Invalid input."
    error=1
  elif ! [[ -n "${selectedoption}" ]]
  then
    echo -ne "\033[1A"
    echo "Your input: ${versionsarray[0]//\"/}"
    ${scriptpath}/QBeat --config set gameVersion "${versionsarray[0]//\"/}"
    if [ $? == 1 ]
    then
      echo "-----------------------------"
      echo "ERROR: Setting gameVersion failed."
      error=1
    fi
  elif [[ $( bc<<<"${selectedoption}<1" ) -eq 1 ]] || [[ $( bc<<<"${selectedoption}>${#versionsarray[@]}" ) -eq 1 ]]
  then
    echo "-----------------------------"
    echo "ERROR: Invalid input."
    error=1
  else
    echo -ne "\033[1A"
    echo "Your input: ${versionsarray[$((selectedoption-1))]//\"/}"
    ${scriptpath}/QBeat --config set gameVersion "${versionsarray[$((selectedoption-1))]//\"/}"
    if [ $? == 1 ]
    then
      echo "-----------------------------"
      echo "ERROR: Setting gameVersion failed."
      error=1
    fi
  fi
}

function action-validate-wine {
  # Validates a Wine prefix
  clear
  cat <<EOF
=============================
  #   Validating Wine:    #
-----------------------------
EOF
  ${scriptpath}/QBeat --validate-wine
  if [ $? == 1 ]
  then
    echo "-----------------------------"
    echo "ERROR: Validating wine failed."
  fi
  echo "-----------------------------"
  read -n 1 -s -r -p "Press any key to contine..."
}

function action-setup-wine {
  # Sets up a Wine prefix
  clear
  cat <<EOF
=============================
  #   Setting up Wine:    #
-----------------------------
EOF
  ${scriptpath}/QBeat --setup-wine
  if [ $? == 1 ]
  then
    echo "-----------------------------"
    echo "ERROR: Setting up wine failed."
  fi
  echo "-----------------------------"
  read -n 1 -s -r -p "Press any key to contine..."
}

function action-patch-game {
  # Installs BSIPA, and patches the game.
  clear
  cat <<EOF
=============================
  #    Patching game:     #
-----------------------------
EOF
  ${scriptpath}/QBeat --install "BSIPA"
  if [ $? == 1 ]
  then
    echo "-----------------------------"
    echo "ERROR: Installing BSIPA failed."
  else
    ${scriptpath}/QBeat --patch
    if [ $? == 1 ]
    then
      echo "-----------------------------"
      echo "ERROR: Patching the game failed."
    fi
  fi
  echo "-----------------------------"
  read -n 1 -s -r -p "Press any key to contine..."
}

function action-validate-mods {
  # Validates all installed mods
  clear
  cat <<EOF
=============================
  #  Validating all mods:  #
-----------------------------
EOF
  ${scriptpath}/QBeat --validate-all
  if [ $? == 1 ]
  then
    echo "-----------------------------"
    echo "ERROR: Validating mods failed."
  fi
  echo "-----------------------------"
  read -n 1 -s -r -p "Press any key to contine..."
}

function action-validate-mod {
  # Validates a specific mod
  clear
  cat <<EOF
=============================
  #  Validating mod(s):   #
-----------------------------
State which mod you would
like to validate.
-----------------------------
EOF
  echo -ne "Your input: "
  read validatemod
  ${scriptpath}/QBeat --validate $validatemod
  if [ $? == 1 ]
  then
    echo "-----------------------------"
    echo "ERROR: Validating mod failed."
  fi
  echo "-----------------------------"
  read -n 1 -s -r -p "Press any key to contine..."
}

function action-list-mods {
  # Lists all mods
  clear
  cat <<EOF
=============================
  #   Listing all mods:   #
-----------------------------
EOF
  ${scriptpath}/QBeat --list
  if [ $? == 1 ]
  then
    echo "-----------------------------"
    echo "ERROR: Listing mods failed."
  fi
  echo "-----------------------------"
  read -n 1 -s -r -p "Press any key to contine..."
}

function action-install-mods {
  # Installs a single mod, or a list of mods separated by commas.
  clear
  cat <<EOF
=============================
  #  Installing mod(s):   #
-----------------------------
State which mods you would
like to install, separated
by commas.
-----------------------------
EOF
  echo -ne "Your input: "
  read installmods
  IFS=',' modarray=(${installmods//, /,}) # Splits input up into array
  if [ ${#modarray[@]} -eq 0 ]
  then
    echo "-----------------------------"
    echo "ERROR: No mods specified."
  else
    for mod in "${modarray[@]}"
    do
      echo "-----------------------------"
      ${scriptpath}/QBeat --install $mod
      if [ $? == 1 ]
      then
        echo "-----------------------------"
        echo "ERROR: Installing $mod failed."
      fi
    done
  fi
  echo "-----------------------------"
  read -n 1 -s -r -p "Press any key to contine..."
}

function action-uninstall-mods {
  # Removes a single mod, or a list of mods separated by commas.
  clear
  cat <<EOF
=============================
  # Uninstalling mod(s):  #
-----------------------------
State which mods you would
like to uninstall, separated
by commas.
-----------------------------
EOF
  echo -ne "Your input: "
  read uninstallmods
  IFS=',' modarray=(${uninstallmods//, /,}) # Splits input up into array
  if [ ${#modarray[@]} -eq 0 ]
  then
    echo "-----------------------------"
    echo "ERROR: No mods specified."
  else
    for mod in "${modarray[@]}"
    do
      ${scriptpath}/QBeat --remove $mod
      if [ $? == 1 ]
      then
        echo "-----------------------------"
        echo "ERROR: Removing $mod failed."
      fi
      echo "-----------------------------"
    done
  fi
  echo "-----------------------------"
  read -n 1 -s -r -p "Press any key to contine..."
}

function action-config-get {
  # Outputs config variable, determined by the first argument.
  clear
  cat <<EOF
=============================
  #   Outputting config:   #
-----------------------------
EOF
  ${scriptpath}/QBeat --config get $1
  if [ $? == 1 ]
  then
    echo "-----------------------------"
    echo "ERROR: Outputting $1 failed."
  fi
  echo "-----------------------------"
  read -n 1 -s -r -p "Press any key to contine..."
}

function action-config-set {
  # Sets a specific config variable to value determined by user input, with the
  # variable name determined by an argument.
  clear
  cat <<EOF
=============================
  #    Setting config:     #
-----------------------------
EOF
  echo "Current value: "
  ${scriptpath}/QBeat --config get $1
  echo "-----------------------------"
  echo -ne "Input new value: "
  read -e configvalue # -e enables bash autocompletion
  if [ -z "$configvalue" ]
  then
    echo "-----------------------------"
    echo "ERROR: No value provided."
  else
    ${scriptpath}/QBeat --config set $1 "$configvalue"
    if [ $? == 1 ]
    then
      echo "-----------------------------"
      echo "ERROR: Setting $1 failed."
    else
      echo "-----------------------------"
      echo "New value: "
      ${scriptpath}/QBeat --config get $1
    fi
  fi
  echo "-----------------------------"
  read -n 1 -s -r -p "Press any key to contine..."
}

function action-version-set {
  # Sets the gameVersion config variable to value selected by user from beatmods
  # api.
  clear
  cat <<EOF
=============================
#    Setting config:     #
-----------------------------
EOF
  echo "Current value: "
  ${scriptpath}/QBeat --config get gameVersion
  echo "-----------------------------"

  versionsarray=( $( curl -sL https://versions.beatmods.com/versions | sed -e 's/\[//' -e 's/\]//' -e 's/,/\n/g' ) )
  echo "  Select a version:"
  for i in ${!versionsarray[@]}
  do
    echo "    $((i+1))) ${versionsarray[${i}]//\"/}"
  done

  echo "-----------------------------"
  echo -ne "Your input: "
  read selectedoption

  if ! [[ "$selectedoption" -eq "$selectedoption" ]] 2> /dev/null
  then
    echo "-----------------------------"
    echo "ERROR: Invalid input."
  elif ! [[ -n "${selectedoption}" ]]
  then
    echo "-----------------------------"
    echo "ERROR: No value provided."
  elif [[ $( bc<<<"${selectedoption}<1" ) -eq 1 ]] || [[ $( bc<<<"${selectedoption}>${#versionsarray[@]}" ) -eq 1 ]]
  then
    echo "-----------------------------"
    echo "ERROR: Invalid input."
  else
    ${scriptpath}/QBeat --config set gameVersion "${versionsarray[$((selectedoption-1))]//\"/}"
    if [ $? == 1 ]
    then
      echo "-----------------------------"
      echo "ERROR: Setting gameVersion failed."
    else
      echo "-----------------------------"
      echo "New value: "
      ${scriptpath}/QBeat --config get gameVersion
    fi
  fi
  echo "-----------------------------"
  read -n 1 -s -r -p "Press any key to contine..."
}

# Execution begins...

GETHELP=0

while getopts "h\?" opts # Look for options passed.
do
  case $opts in
    h|\?) GETHELP=1;;
  esac
done

shift $(( "$OPTIND"-1 ))

if [ $GETHELP == 1 ] # Outputs help menu
then
  usage
  exit 0
fi

menu-main # Start main menu function
